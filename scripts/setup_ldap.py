#!/usr/bin/env python3
"""
Interactive LDAP configuration setup for CARPEM Oncocentre
"""

import os
import sys
import shutil

def setup_ldap_config():
    """Interactive setup of LDAP configuration"""
    
    print("CARPEM Oncocentre - LDAP Configuration Setup")
    print("=" * 45)
    print()
    
    config_file = 'config/.ldap_config.env'
    
    # Create config directory if it doesn't exist
    os.makedirs('config', exist_ok=True)
    
    if os.path.exists(config_file):
        print(f"LDAP configuration file {config_file} already exists.")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite not in ['y', 'yes']:
            print("Setup cancelled.")
            return
    
    print("This script will help you configure LDAP authentication.")
    print("You can skip any field by pressing Enter to use the default value.")
    print()
    
    # Collect LDAP settings
    settings = {}
    
    # Basic settings
    ldap_enabled = input("Enable LDAP authentication? (y/N): ").lower().strip()
    settings['LDAP_ENABLED'] = 'true' if ldap_enabled in ['y', 'yes'] else 'false'
    
    if settings['LDAP_ENABLED'] == 'true':
        settings['LDAP_SERVER'] = input("LDAP Server (e.g., ldap://dc.company.com): ").strip()
        if not settings['LDAP_SERVER']:
            settings['LDAP_SERVER'] = 'ldap://your-domain-controller.example.com'
        
        port = input("LDAP Port (default 389): ").strip()
        settings['LDAP_PORT'] = port if port else '389'
        
        use_ssl = input("Use SSL? (y/N): ").lower().strip()
        settings['LDAP_USE_SSL'] = 'true' if use_ssl in ['y', 'yes'] else 'false'
        
        settings['LDAP_DOMAIN'] = input("Domain name (e.g., COMPANY): ").strip()
        if not settings['LDAP_DOMAIN']:
            settings['LDAP_DOMAIN'] = 'YOURDOMAIN'
        
        settings['LDAP_BASE_DN'] = input("Base DN (e.g., DC=company,DC=com): ").strip()
        if not settings['LDAP_BASE_DN']:
            settings['LDAP_BASE_DN'] = 'DC=yourdomain,DC=com'
        
        search_base = input("User search base (e.g., OU=Users,DC=company,DC=com): ").strip()
        settings['LDAP_USER_SEARCH_BASE'] = search_base if search_base else 'OU=Users,DC=yourdomain,DC=com'
        
        search_filter = input("User search filter (default: (sAMAccountName={username})): ").strip()
        settings['LDAP_USER_SEARCH_FILTER'] = search_filter if search_filter else '(sAMAccountName={username})'
        
        print()
        print("Service account (optional - for user searches):")
        bind_user = input("Service account DN (optional): ").strip()
        settings['LDAP_BIND_USER'] = bind_user
        
        if bind_user:
            bind_password = input("Service account password: ").strip()
            settings['LDAP_BIND_PASSWORD'] = bind_password
        else:
            settings['LDAP_BIND_PASSWORD'] = ''
        
        timeout = input("Connection timeout in seconds (default 10): ").strip()
        settings['LDAP_TIMEOUT'] = timeout if timeout else '10'
    
    # Authentication method settings
    print()
    print("Authentication method settings:")
    allow_local = input("Allow local authentication? (Y/n): ").lower().strip()
    settings['ALLOW_LOCAL_AUTH'] = 'false' if allow_local in ['n', 'no'] else 'true'
    
    allow_ldap = input("Allow LDAP authentication? (Y/n): ").lower().strip()
    settings['ALLOW_LDAP_AUTH'] = 'false' if allow_ldap in ['n', 'no'] else 'true'
    
    auto_create = input("Auto-create LDAP users? (Y/n): ").lower().strip()
    settings['AUTO_CREATE_LDAP_USERS'] = 'false' if auto_create in ['n', 'no'] else 'true'
    
    # Write configuration file
    try:
        with open(config_file, 'w') as f:
            f.write("# LDAP Configuration for CARPEM Oncocentre\n")
            f.write("# This file contains sensitive LDAP credentials and should NOT be committed to git\n")
            f.write("# Generated by setup_ldap.py\n\n")
            
            f.write("# Enable/Disable LDAP Authentication\n")
            f.write(f"LDAP_ENABLED={settings['LDAP_ENABLED']}\n\n")
            
            if settings['LDAP_ENABLED'] == 'true':
                f.write("# LDAP Server Configuration\n")
                f.write(f"LDAP_SERVER={settings['LDAP_SERVER']}\n")
                f.write(f"LDAP_PORT={settings['LDAP_PORT']}\n")
                f.write(f"LDAP_USE_SSL={settings['LDAP_USE_SSL']}\n\n")
                
                f.write("# Domain Configuration\n")
                f.write(f"LDAP_DOMAIN={settings['LDAP_DOMAIN']}\n")
                f.write(f"LDAP_BASE_DN={settings['LDAP_BASE_DN']}\n")
                f.write(f"LDAP_USER_SEARCH_BASE={settings['LDAP_USER_SEARCH_BASE']}\n")
                f.write(f"LDAP_USER_SEARCH_FILTER={settings['LDAP_USER_SEARCH_FILTER']}\n\n")
                
                f.write("# Service Account (Optional)\n")
                f.write(f"LDAP_BIND_USER={settings['LDAP_BIND_USER']}\n")
                f.write(f"LDAP_BIND_PASSWORD={settings['LDAP_BIND_PASSWORD']}\n\n")
                
                f.write("# Connection Settings\n")
                f.write(f"LDAP_TIMEOUT={settings['LDAP_TIMEOUT']}\n\n")
            
            f.write("# Authentication Method Configuration\n")
            f.write(f"ALLOW_LOCAL_AUTH={settings['ALLOW_LOCAL_AUTH']}\n")
            f.write(f"ALLOW_LDAP_AUTH={settings['ALLOW_LDAP_AUTH']}\n")
            f.write(f"AUTO_CREATE_LDAP_USERS={settings['AUTO_CREATE_LDAP_USERS']}\n")
        
        print(f"\n✓ LDAP configuration saved to {config_file}")
        print("✓ This file is excluded from git to protect sensitive credentials")
        
        if settings['LDAP_ENABLED'] == 'true':
            print("\nNext steps:")
            print("1. Test your LDAP connection using the admin interface")
            print("2. Try logging in with LDAP credentials")
            print("3. Monitor logs for any authentication issues")
        
    except Exception as e:
        print(f"\n✗ Error saving configuration: {e}")

def main():
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        print("Usage: python setup_ldap.py")
        print("Interactive setup script for LDAP authentication configuration")
        return
    
    setup_ldap_config()

if __name__ == '__main__':
    main()